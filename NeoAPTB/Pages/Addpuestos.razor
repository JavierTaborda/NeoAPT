@page "/setpuestos"

@inject NotificationService NotificationService
@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService


<RadzenRow class="rz-text-align-Left">
    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>


    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDatePicker @bind-Value=@fecha>
                <FooterTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(args => fecha = DateTime.Now) Text="Hoy" class="my-3" Style="width: 100%; max-width: 350px;min-width: 90px;" />
                </FooterTemplate>
            </RadzenDatePicker>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>
</RadzenRow>
@*
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Order" Click="@InsertRow" Disabled=@(orderToInsert != null || orderToUpdate != null) />*@
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Order" Click="@InsertRow" />

<RadzenDataGrid @ref="@PuestosGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataPuestos" TItem="PuesTrab" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <Columns>

@*        <RadzenDataGridColumn TItem="PuesTrab" Title="Línea" Frozen="true" Property=IdLineaNavigation.Lnom Width="80px">
            <Template>
                @montos.Where(l=>l.IdLinea==valuelinea).Select(m=>m.IdLineaNavigation.Lnom).First()
            </Template>
        </RadzenDataGridColumn>*@
        <RadzenDataGridColumn TItem="PuesTrab" Title="Línea" Frozen="true" Width="80px">
            <Template>
                @montos.FirstOrDefault(m=>m.IdLineaNavigation.IdLinea==valuelinea).IdLineaNavigation.Lnom
            </Template>
        </RadzenDataGridColumn>

         <RadzenDataGridColumn TItem="PuesTrab" Title="Puesto" Frozen="true" Property="Ptnombre" Width="80px">
            <Template>
                @context.Ptnombre
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="PuesTrab" Title="Descripción" Property="" Width="160px">
            <Template>
                @context.Ptdescri
            </Template>

      @*      <EditTemplate Context="resume">
                <RadzenDropDown @bind-Value="puestonuevo" Data="puestos" TextProperty="Ptnombre" ValueProperty="IdPuesTrab" Style="width:100%; display: block;" />
            </EditTemplate>*@
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="PuesTrab" Title="Estado" Property="" Width="160px">
            <Template>
                @context.Ptesta
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="PuesTrab" Context="resume" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px">
            <Template Context="resume">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(resume))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>

            <EditTemplate Context="resume">

                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(resume))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(resume))">
                </RadzenButton>

            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<PuesTrab> PuestosGrid;
    //RadzenDropDown<string> radzenDropDown;
    //RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<PuesTrab> DataPuestos;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    List<Grupos> grupos;


    int valuecentro;
    int valuediv;
    int valuelinea;
    DateTime fecha = DateTime.Now;//fecha seleccionada
                                  //int puestonuevo { get; set; }//guarda el id del nuevo puesto de trabajo.
                                  //int suplencianueva { get; set; }//guarda el id del nuevo tipo de suplencia.
    bool isLoading = false;
    int AddResumen = 0; //valida si se agrega resumen

    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();
        isLoading = true;
        string centro = "All1";
        centros = await APIService.GetCentrosxEmpresa(centro);
        DataCentros = centros;
        isLoading = false;
    }
    void SetDivision()
    {
        //limpiar las listas

        valuediv = 0;
        lineas = null;
        valuelinea = 0;

        divisions = new List<Division>();
        foreach (var c in centros)
        {
            foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
            {
                divisions.Add(d);

            }
        }
    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(PuesTrab puestoedit)
    {
        //resumeToUpdate = resume;
        //puestonuevo = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdMontosNavigation.IdPuesTrabNavigation.IdPuesTrab).First();
        //suplencianueva = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdTipSupleNavigation.IdTipSuple).First();
        //await ResumenGrid.EditRow(resume);
    }

    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(PuesTrab puestoedit)
    {
        //for (int i = 0; i < resumen.Count; i++)
        //{
        //    if (resumen[i].IdPersonal == resume.IdPersonal)
        //    {
        //        resumen[i].IdMontos = montos.Where(m => m.IdPuesTrabNavigation.IdPuesTrab == puestonuevo).Select(a => a.IdMontos).First();
        //        resumen[i].IdMontosNavigation = montos.Where(m => m.IdMontos == resume.IdMontos).First();

        //        resumen[i].IdTipSuple = tipsuples.Where(m => m.IdTipSuple == suplencianueva).Select(a => a.IdTipSuple).First();
        //        resumen[i].IdTipSupleNavigation = tipsuples.Where(m => m.IdTipSuple == resume.IdTipSuple).First();
        //    }

        //}
        //puestonuevo = 0;
        //suplencianueva = 0;
        //resumeToUpdate = null;


    }

    async Task SaveRow(PuesTrab puestoedit)
    {
        //await ResumenGrid.UpdateRow(resume);
    }

    void CancelEdit(PuesTrab puestoedit)
    {
        //if (resume == resumeToInsert)
        //{
        //    resumeToInsert = null;
        //}

        //resumeToUpdate = null;

        //ResumenGrid.CancelEditRow(resume);

    }

    void Reset()
    {
        //resumeToInsert = null;
        //resumeToUpdate = null;
    }
    async Task InsertRow()
    {
        //orderToInsert = new Order();
        //await ordersGrid.InsertRow(orderToInsert);
    }

    private async Task GetData()
    {
        puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
        DataPuestos = puestos;
    }

}