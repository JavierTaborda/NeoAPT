@page "/consultarpuesto"

@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider

@inject IPersonal PersonalService
@inject IMontos MontosService
@inject IPuestosTrabajo PuestosTrabajoslService
@inject IResumen ResumenService
@inject IMaestraData MaestraService
@inject IRolLogic RolLogicService
@* @attribute [Authorize(Roles = "Admin, SupIntendente, SupIntendenteGeneral, SuperAdmin, Supervisor")] *@

<h3>Consultar Puestos Asignados</h3>
<p></p>
<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangelineas="((int l) => this.valuelinea = l)" />

<RadzenRow class="rz-text-align-Left">
    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Fecha" />
            <RadzenDatePicker @bind-Value=@fecha>
                <FooterTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(args => fecha = DateTime.Now) Text="Hoy" class="my-3" Style="width: 100%; max-width: 350px;min-width: 90px;" />
                </FooterTemplate>
            </RadzenDatePicker>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Buscar" />
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>
</RadzenRow>


@if (AddResumen == 1)
{

    <RadzenDataGrid @ref="@ResumenGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataResumen" TItem="Resuman" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" ColumnWidth="200px">
        <Columns>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha" Frozen="true" Property="IdPersonalNavigation.PeFicha" Width="80px">
                <Template>
                    @resumen.Where(r=>r.IdMontosNavigation.IdLineaNavigation.IdLinea==valuelinea).Select(s=>s.IdMontosNavigation.IdLineaNavigation.Lnom).First()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha" Frozen="true" Property="IdPersonalNavigation.PeFicha" Width="80px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdPersonalNavigation.PeFicha).First()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Nombre" Property="IdPersonalNavigation.PeApellido" Width="160px">
                <Template>
                    @context.IdPersonalNavigation.PeNombre  @context.IdPersonalNavigation.PeApellido
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Puesto" Property="IdMontosNavigation.IdPuesTrabNavigation.Ptnombre" Width="160px">
                <Template>

                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre).First()

                </Template>


            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Suplencia" Property="IdTipSupleNavigation.Tscausa" Width="160px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdTipSupleNavigation.Tscausa).First()
                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha Suplido" Property="Rsuplido" Width="160px">

            </RadzenDataGridColumn>



        </Columns>
    </RadzenDataGrid>

}
else if (AddResumen == 2)
{
    <div class="spinner"></div>
}
else
{

}


@code {

    [CascadingParameter]
    private List<Claim> claims { get; set; }

    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;


    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar el rol del usuario


    RadzenDataGrid<Resuman> ResumenGrid;
    //RadzenDropDown<string> radzenDropDown;
    RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<Resuman> DataResumen;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    List<Grupos> grupos;


    string valuepersonal;
    string valuegrupo;


    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar

    DateTime fecha = DateTime.Now;//fecha seleccionada
                                  //int puestonuevo { get; set; }//guarda el id del nuevo puesto de trabajo.
                                  //int suplencianueva { get; set; }//guarda el id del nuevo tipo de suplencia.
    bool isLoading = false;
    int AddResumen = 0; //valida si se agrega resumen


    Resuman resumeToInsert;
    Resuman resumeToUpdate;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await CreateData();
      
        permisos = RolLogicService.ListasRol(roleClaim);

        isLoading = false;
    }
    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);  
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;
    }

    void Reset()
    {
        resumeToInsert = null;
        resumeToUpdate = null;
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }


    // void SetDivision()
    // {
    //     //limpiar las listas

    //     valuediv = 0;
    //     lineas = null;
    //     valuelinea = 0;

    //     divisions = new List<Division>();
    //     foreach (var c in centros)
    //     {
    //         foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
    //         {
    //             divisions.Add(d);

    //         }
    //     }
    //     valuediv = divisions.First().IdDivision;

    // }

    // void SetLinea()
    // {

    //     lineas = new List<Linea>();
    //     foreach (var d in divisions)
    //     {
    //         foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
    //         {
    //             lineas.Add(l);
    //         }
    //     }
    //     valuelinea = lineas.First().IdLinea;

    // }

    //generar la lista de trabajadores(personal)  presentes el dia de hoy para asignar puestos o verificar sus registros
    private async Task GetData()
    {
        AddResumen = 2;
        Reset();
        try
        {
            //validar que se selecciono una linea
            if (valuelinea > 0)
            {
                //obtener resumen ya registrados para el dia
                
                await ResumenService.GetResumenxlineafecha(valuelinea, fecha.Date, fecha.Date);
                await CargarListas();//Llenar listas de personal, montos y puestos

                isLoading = true;
                DataResumen = ResumenService.resumenlineafecha;
                resumen = ResumenService.resumenlineafecha;
                isLoading = false;
                AddResumen = 1;

            }
            else
            {
                //Mostrar mensaje para sellecionar linea
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
                AddResumen = 0;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Style = "position: relative;", Duration = 40000, Summary = "Error de Cargado", Detail = ex.Message });
        }
    }

    private async Task CargarListas()
    {

        //Consultar data en el service

        try
        {
            //await MontosService.GetMontosxCentro(valuecentro);
            await MontosService.GetMontosxLinea(valuelinea);
            await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
            await ResumenService.GetTipoInce();
            await ResumenService.GetTipoSuple();

            //cargar listas del service al contexto actual
            personal = await PersonalService.GetPersonal(valuecentros, valuelinea, "");
            montos = MontosService.MontosPuestoCentro;
            puestos = PuestosTrabajoslService.puesTrab;
            tipsuples = ResumenService.tiposuple;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
        }


    }

}
