@page "/consultarpuesto"

@inject NotificationService NotificationService
@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService




<RadzenRow class="rz-text-align-Left">
    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="2">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown @ref=@selectgrupo FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@grupos TextProperty="Grupo" ValueProperty="Grupo" AllowClear="true" @bind-Value=valuegrupo Style="width: 100%; max-width: 250px;min-width: 100px;" SearchTextChanged="@(args => searchTextChanged(args))" />
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>

</RadzenRow>

@if (AddResumen == 1)
{

    <RadzenDataGrid @ref="@ResumenGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataResumen" TItem="Resuman" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single"   ColumnWidth="200px">
        <Columns>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha" Frozen="true" Property="IdPersonalNavigation.PeFicha" Width="80px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdPersonalNavigation.PeFicha).First()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Nombre" Property="IdPersonalNavigation.PeApellido" Width="160px">
                <Template>
                    @context.IdPersonalNavigation.PeNombre  @context.IdPersonalNavigation.PeApellido
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Puesto" Property="IdMontosNavigation.IdPuesTrabNavigation.Ptnombre" Width="160px">
                <Template>

                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre).First()

                </Template>


            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Suplencia" Property="IdTipSupleNavigation.Tscausa" Width="160px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdTipSupleNavigation.Tscausa).First()
                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha Suplido" Property="Rsuplido" Width="160px">

            </RadzenDataGridColumn>



        </Columns>
    </RadzenDataGrid>

}
else if (AddResumen == 2)
{
    <div class="spinner"></div>
}
else
{

}


@code {
    RadzenDataGrid<Resuman> ResumenGrid;
    //RadzenDropDown<string> radzenDropDown;
    RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<Resuman> DataResumen;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    List<Grupos> grupos;


    string valuepersonal;
    string valuegrupo;
    int valuecentro;
    int valuediv;
    int valuelinea;
    int puestonuevo { get; set; }//guarda el id del nuevo puesto de trabajo.
    int suplencianueva { get; set; }//guarda el id del nuevo tipo de suplencia.
    bool isLoading = false;
    int AddResumen = 0; //valida si se agrega resumen


    Resuman resumeToInsert;
    Resuman resumeToUpdate;

    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();
        isLoading = true;
        string centro = "All1";
        centros = await APIService.GetCentrosxEmpresa(centro);
        DataCentros = centros;
        isLoading = false;
    }
    void Reset()
    {
        resumeToInsert = null;
        resumeToUpdate = null;
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }


    void SetDivision()
    {
        //limpiar las listas

        valuediv = 0;
        lineas = null;
        valuelinea = 0;

        divisions = new List<Division>();
        foreach (var c in centros)
        {
            foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
            {
                divisions.Add(d);

            }
        }
    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
    }

    //generar la lista de trabajadores(personal)  presentes el dia de hoy para asignar puestos o verificar sus registros
    private async Task GetData()
    {
        AddResumen = 2;

        try
        {
            //validar que se selecciono una linea
            if (valuelinea > 0)
            {
                    //obtener resumen ya registrados para el dia

                    await ResumenService.GetResumenxLinea(valuelinea);
                    await CargarListas();//Llenar listas de personal, montos y puestos
                 
                    isLoading = true;
                    DataResumen = ResumenService.resumenlinea;
                    resumen = ResumenService.resumenlinea;
                    isLoading = false;
                    AddResumen = 1;
                
            }
            else
            {
                //Mostrar mensaje para sellecionar linea
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
                AddResumen = 0;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Style = "position: relative;", Duration = 40000, Summary = "Error de Cargado", Detail = ex.Message });
        }
    }

    private async Task CargarListas()
    {

        //Consultar data en el service

        try
        {
            //await MontosService.GetMontosxCentro(valuecentro);
            await MontosService.GetMontosxLinea(valuelinea);
            await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
            await ResumenService.GetTipoInce();
            await ResumenService.GetTipoSuple();

            //cargar listas del service al contexto actual
            personal = await PersonalService.GetPersonal("");
            montos = MontosService.MontosPuestoCentro;
            puestos = PuestosTrabajoslService.puesTrab;
            tipsuples = ResumenService.tiposuple;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
        }


    }

}
