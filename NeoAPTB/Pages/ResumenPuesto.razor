@page "/asignarpuesto"

@inject NotificationService NotificationService
@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService


<h3>Asignar Puestos de Trabajo</h3>




<RadzenRow class="rz-text-align-Left">
    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 80px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn Size="2">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenDropDown @ref=@selectgrupo FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@Grupos TextProperty="Value" ValueProperty="Value" AllowClear="true" @bind-Value=valuegrupo Style="width: 100%; max-width: 250px;min-width: 100px;" SearchTextChanged="@(args => searchTextChanged(args))" />
        </div>
    </RadzenColumn>

    <RadzenColumn Size="3">
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>

</RadzenRow>

@if (AddResumen == 1)
{

    <RadzenDataGrid @ref="@ResumenGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataResumen" TItem="Resuman" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <Columns>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha" Frozen="true" Property="IdPersonalNavigation.PeFicha" Width="80px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdPersonalNavigation.PeFicha).First()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Nombre" Property="IdPersonalNavigation.PeApellido" Width="160px">
                <Template>
                    @context.IdPersonalNavigation.PeNombre  @context.IdPersonalNavigation.PeApellido
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Puesto" Property="IdMontosNavigation.IdPuesTrabNavigation.Ptnombre" Width="160px">
                <Template>

                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre).First()

                </Template>

                <EditTemplate Context="resume">
                    <RadzenDropDown @bind-Value="puestonuevo" Data="puestos" TextProperty="Ptnombre" ValueProperty="IdPuesTrab" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Suplencia" Property="IdTipSupleNavigation.Tscausa" Width="160px">
                <Template>
                    @resumen.Where(r=>r.IdPersonalNavigation.IdPersonal==context.IdPersonal).Select(s=>s.IdTipSupleNavigation.Tscausa).First()
                </Template>
                <EditTemplate Context="resume">
                    <RadzenDropDown @bind-Value="suplencianueva" Data=" ResumenService.tiposuple" TextProperty="Tscausa" ValueProperty="IdTipSuple" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha Suplido" Property="Rsuplido" Width="160px">
                <EditTemplate Context="resume">
                    <RadzenTextBox Placeholder="Ficha..." @bind-Value="resume.Rsuplido" class="w-100" />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Resuman" Context="resume" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px">
                <Template Context="resume">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(resume))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>

                <EditTemplate Context="resume">

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(resume))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(resume))">
                    </RadzenButton>

                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

    <div class="rz-p-sm-4 rz-text-align-right">
        <RadzenButton Click=@(args => SaveResumen(resumen)) Text="Guardar Puestos" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    </div>
}
else if (AddResumen == 2)
{
    <div class="spinner"></div>
}
else
{

}


@code {

    RadzenDataGrid<Resuman> ResumenGrid;
    //RadzenDropDown<string> radzenDropDown;
    RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<Resuman> DataResumen;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    //List<Grupos> grupos;


    string valuepersonal;
    string valuegrupo;
    int valuecentro;
    int valuediv;
    int valuelinea;
    int puestonuevo { get; set; }//guarda el id del nuevo puesto de trabajo.
    int suplencianueva { get; set; }//guarda el id del nuevo tipo de suplencia.
    bool isLoading = false;
    int AddResumen = 0; //valida si se agrega resumen

    Dictionary<int, string> Grupos = new Dictionary<int, string>
        {
            { 1, "A" },
            { 2, "B" },
            { 3, "C" },
            { 4, "D" },
            { 5, "N" }
        };

    // dict.Add("key3", "value3");

    Resuman resumeToInsert;
    Resuman resumeToUpdate;

    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();


        isLoading = true;
        string centro = "All1";
        centros = await APIService.GetCentrosxEmpresa(centro);
        DataCentros = centros;
        isLoading = false;
    }

    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    void SetDivision()
    {
        //limpiar las listas
        if (valuecentro > 0)
        {
            valuediv = 0;
            lineas = null;
            valuelinea = 0;

            divisions = new List<Division>();
            foreach (var c in centros)
            {
                foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
                {
                    divisions.Add(d);

                }
            }
        }
    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
    }

    //generar la lista de trabajadores(personal)  presentes el dia de hoy para asignar puestos o verificar sus registros
    private async Task GetData()
    {
        AddResumen = 2;

        try
        {
            //validar que se selecciono una linea
            if (valuelinea > 0)
            {
                //obtener resumen ya registrados para el dia
                //await ResumenService.GetResumenxCentro(valuecentro);
                await ResumenService.GetResumenxLinea(valuelinea);
                await CargarListas();//Llenar listas de personal, montos y puestos 
                isLoading = true;

                if (ResumenService.resumenlinea.Count() == 0)
                {


                    if (puestos.Count() > 0)
                    {
                        int hora = int.Parse(DateTime.Now.ToString("HHmmss"));
                        resumen = new List<Resuman>();
                        foreach (var p in personal)
                        {
                            Resuman newresumen = new Resuman();


                            newresumen.IdTipSuple = ResumenService.tiposuple.FirstOrDefault(t => t.IdTipSuple == 1).IdTipSuple;
                            newresumen.Rfecha = DateTime.Now;
                            newresumen.Rturno = (hora>=60000 & hora<=18000)?1:2;
                            newresumen.Rgrupo = "1";
                            newresumen.IdPersonal = p.IdPersonal;
                            newresumen.Rsuplido = "";
                            newresumen.IdMontos = MontosService.MontosPuestoLinea.FirstOrDefault(t => t.IdMontos == 1).IdMontos;
                            newresumen.RuserVali = "Prueba Supervisor";
                            newresumen.RuserPago = "";
                            newresumen.IdTipIncen = ResumenService.tipoincentivo.FirstOrDefault(t => t.IdTipIncen == 1).IdTipIncen;

                            newresumen.IdPersonalNavigation = personal.Where(f => f.IdPersonal == p.IdPersonal).First();
                            newresumen.IdMontosNavigation = MontosService.MontosPuestoLinea.Where(m => m.IdMontos == newresumen.IdMontos).First();
                            newresumen.IdTipIncenNavigation = ResumenService.tipoincentivo.Where(i => i.IdTipIncen == newresumen.IdTipIncen).First();
                            newresumen.IdTipSupleNavigation = ResumenService.tiposuple.Where(s => s.IdTipSuple == newresumen.IdTipSuple).First();


                            resumen.Add(newresumen);
                        }
                        DataResumen = resumen;
                        isLoading = false;
                        AddResumen = 1;
                    }
                    else
                    {
                        //Mostrar mensaje de que no hay puestos para esas lineas
                        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "No hay puestos asociados a la línea.", Detail = "Contacte el desarrollador." });
                        AddResumen = 0;
                    }


                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Duration = 10000, Summary = "Ya se cargo personal el dia de hoy..", Detail = "" });
                    //await CargarListas();//Llenar listas de personal, montos y puestos
                    isLoading = true;
                    DataResumen = ResumenService.resumenlinea;
                    resumen = ResumenService.resumenlinea;
                    isLoading = false;
                    AddResumen = 1;
                }
            }
            else
            {
                //Mostrar mensaje para sellecionar linea
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
                AddResumen = 0;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Style = "position: relative;", Duration = 40000, Summary = "Error de Cargado", Detail = ex.Message });
        }
    }

    private async Task CargarListas()
    {

        //Consultar data en el service

        try
        {
            //await MontosService.GetMontosxCentro(valuecentro);
            await MontosService.GetMontosxLinea(valuelinea);
            await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
            await ResumenService.GetTipoInce();
            await ResumenService.GetTipoSuple();

            //cargar listas del service al contexto actual
            personal = await PersonalService.GetPersonal("");
            montos = MontosService.MontosPuestoLinea;
            puestos = PuestosTrabajoslService.puesTrab;
            tipsuples = ResumenService.tiposuple;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });

        }


    }

    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(Resuman resume)
    {
        resumeToUpdate = resume;
        puestonuevo = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdMontosNavigation.IdPuesTrabNavigation.IdPuesTrab).First();
        suplencianueva = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdTipSupleNavigation.IdTipSuple).First();
        await ResumenGrid.EditRow(resume);
    }

    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(Resuman resume)
    {
        for (int i = 0; i < resumen.Count; i++)
        {
            if (resumen[i].IdPersonal == resume.IdPersonal)
            {
                resumen[i].IdMontos = montos.Where(m => m.IdPuesTrabNavigation.IdPuesTrab == puestonuevo).Select(a => a.IdMontos).First();
                resumen[i].IdMontosNavigation = montos.Where(m => m.IdMontos == resume.IdMontos).First();

                resumen[i].IdTipSuple = tipsuples.Where(m => m.IdTipSuple == suplencianueva).Select(a => a.IdTipSuple).First();
                resumen[i].IdTipSupleNavigation = tipsuples.Where(m => m.IdTipSuple == resume.IdTipSuple).First();
            }

        }
        puestonuevo = 0;
        suplencianueva = 0;
        resumeToUpdate = null;


    }

    async Task SaveRow(Resuman resume)
    {
        await ResumenGrid.UpdateRow(resume);
    }

    void CancelEdit(Resuman resume)
    {
        if (resume == resumeToInsert)
        {
            resumeToInsert = null;
        }

        resumeToUpdate = null;

        ResumenGrid.CancelEditRow(resume);

    }

    void Reset()
    {
        resumeToInsert = null;
        resumeToUpdate = null;
    }

    //Registrar el resumen
    private void SaveResumen(List<Resuman> resumen)
    {
        List<Resuman> insert = resumen;
        try
        {
            ResumenService.InsertResumen(insert);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Duration = 40000, Summary = "Resumen de Personal Cargado Exitosamente.", Detail = "El personal fue asignado a los puestos correctamente." });
            AddResumen = 0;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Duration = 40000, Summary = "Error de Cargado", Detail = ex.Message });

        }

    }

}


