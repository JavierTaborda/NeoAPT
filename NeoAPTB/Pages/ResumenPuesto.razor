@page "/asignarpuesto"


@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService


<h3>Asignar Puestos de Trabajo</h3>


    





<RadzenRow class="rz-text-align-center" Gap="1rem">
    <RadzenColumn class=" rz-p-1">
        <div class="rz-p-sm-4 rz-text-align-center">
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
             Data=@centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 300px;" SearchTextChanged="@(args => searchTextChanged(args))" />
        </div>
    </RadzenColumn>

    <RadzenColumn class=" rz-p-1">

        <div class="rz-p-sm-4 rz-text-align-center">
            <RadzenDropDown @ref=@radzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@personal TextProperty="PeNombre" ValueProperty="PeFicha" AllowClear="true" @bind-Value=valuepersonal Style="width: 100%; max-width: 300px;" SearchTextChanged="@(args => searchTextChanged(args))" />
        </div>
    </RadzenColumn>
    <RadzenColumn class="rz-p-1">
        <div class="rz-p-sm-4 rz-text-align-center">
            <RadzenDropDown @ref=@selectgrupo FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@grupos TextProperty="Grupo" ValueProperty="Grupo" AllowClear="true" @bind-Value=valuegrupo Style="width: 100%; max-width: 300px;" SearchTextChanged="@(args => searchTextChanged(args))" />
        </div>
    </RadzenColumn>
    <RadzenColumn class="rz-p-1">
              <div class="rz-p-sm-4 rz-text-align-center">
                <RadzenButton Click=@(args => OnClick("Successiconbutton")) Text="Consultar" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
            </div>
    </RadzenColumn>

</RadzenRow>

@*<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataCentros" TItem="Centro" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="Centro" Property="IdCentro" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Centro" Property="Cnom" Title="Centro" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Centro" Property="Cnom" Title="Centro" Frozen="true" Width="160px">
            <Template>
                @context.Cnom
            </Template>
         </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>*@

<RadzenDataGrid @ref="@ResumenGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataResumen" TItem="Resuman" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow">
    <Columns>

    @*    <RadzenDataGridColumn TItem="Resuman" Property="IdTipSuple" Filterable="false" Title="Id Suplencia" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Resuman" Property="Rturno" Title="Turno" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="IdPersonal" Frozen="true" Width="160px" />

        <RadzenDataGridColumn TItem="Resuman" Property="IdTipIncen" Title="Id Incentivo" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Resuman" Property="IdTipIncen" Title="Id Incentivo" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Resuman" Property="IdTipIncen" Title="Id Incentivo" Frozen="true" Width="160px" />*@
        <RadzenDataGridColumn TItem="Resuman"  Title="Ficha" Frozen="true" Width="160px">
            <Template>
                @context.IdPersonalNavigation.PeFicha  
            </Template>
        </RadzenDataGridColumn>   
        <RadzenDataGridColumn TItem="Resuman"  Title="Nombre" Frozen="true" Width="160px">
            <Template>
                @context.IdPersonalNavigation.PeNombre @context.IdPersonalNavigation.PeApellido  
            </Template>
        </RadzenDataGridColumn>    
        <RadzenDataGridColumn TItem="Resuman"  Title="Puesto" Frozen="true" Width="160px">
            <Template>
                @context.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre
            </Template>

            <EditTemplate Context="resume">
             @*   <RadzenDropDown @bind-Value="resume.IdMontos" Data="@DataResumen" TextProperty="IdMontos" ValueProperty="IdMontos" Style="width:100%; display: block;" />*@
                <RadzenDropDown @bind-Value="resume.IdMontos" Data="@montos" TextProperty="IdMontosNavigation.IdPuesTrabNavigation.Ptnombre" ValueProperty="IdMontos" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>    
        <RadzenDataGridColumn TItem="Resuman"  Title="Suplencia" Frozen="true" Width="160px">
            <Template>
                @context.IdTipSupleNavigation.Tscausa
            </Template>
        </RadzenDataGridColumn>       
           
        <RadzenDataGridColumn TItem="Resuman"  Title="Incentivo" Frozen="true" Width="160px">
            <Template>
                @context.IdTipIncenNavigation.Tinombre
            </Template>
        </RadzenDataGridColumn>       
           
        <RadzenDataGridColumn TItem="Resuman"  Title="Monto" Frozen="true" Width="160px">
            <Template>
                @context.IdMontosNavigation.Mmonto
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Resuman" Context="resume" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="resume">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(resume))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="resume">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(resume))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(resume))">
                </RadzenButton>
               
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>





@code {

    RadzenDataGrid<Resuman> ResumenGrid;
    RadzenDropDown<string> radzenDropDown;
    RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<Resuman> DataResumen;
    List<Centro> centros;
    List<Grupos> grupos;
    string valuepersonal;
    string valuegrupo;
    int valuecentro;
    bool isLoading=false;
    // string searchTextStatus, searchcentro;

    Resuman resumeToInsert;
    Resuman resumeToUpdate;

    protected override async Task OnInitializedAsync()
    {


        //await base.OnInitializedAsync();
        isLoading = true;

        string centro = "All1";
        centros= await APIService.GetCentrosxEmpresa(centro);
        DataCentros = centros;
        isLoading = false;

    }

    void searchTextChanged(string text)
    {

        //searchTextStatus = $"Valor buscado: {text}";

        // Console.WriteLine($"Search text: {radzenDropDown.SearchText}");

        StateHasChanged();
    }
    private async Task OnClick(string text)
    {
        isLoading = true;
        await MontosService.GetMontosxCentro(valuecentro);
        await PuestosTrabajoslService.GetPuestosTrabajo(valuecentro);
        await ResumenService.GetTipoInce();
        await ResumenService.GetTipoSuple();
        personal = await PersonalService.GetPersonal("");
        resumen = new List<Resuman>();
        foreach (var p in personal)
        {
            Resuman newresumen = new Resuman();


            newresumen.IdTipSuple=ResumenService.tiposuple.FirstOrDefault(t=>t.IdTipSuple==1).IdTipSuple;
            newresumen.Rfecha=DateTime.Now;
            newresumen.Rturno=1;
            newresumen.Rgrupo="1";
            newresumen.IdPersonal=p.IdPersonal;
            newresumen.Rsuplido="";
            newresumen.IdMontos = MontosService.MontosPuestoCentro.FirstOrDefault(t => t.IdMontos == 1).IdMontos;
            newresumen.RuserVali="";
            newresumen.RuserPago="";
            newresumen.IdTipIncen=ResumenService.tipoincentivo.FirstOrDefault(t => t.IdTipIncen == 1).IdTipIncen;

            newresumen.IdPersonalNavigation = personal.Where(f => f.IdPersonal == p.IdPersonal).First();
            newresumen.IdMontosNavigation = MontosService.MontosPuestoCentro.Where(m => m.IdMontos == newresumen.IdMontos).First();
            newresumen.IdTipIncenNavigation = ResumenService.tipoincentivo.Where(i => i.IdTipIncen == newresumen.IdTipIncen).First();
            newresumen.IdTipSupleNavigation = ResumenService.tiposuple.Where(s => s.IdTipSuple == newresumen.IdTipSuple).First();
 

            resumen.Add(newresumen);
        }
        DataResumen = resumen;
        isLoading = false;
    }

    async Task EditRow(Resuman resume)
    {
        resumeToUpdate = resume;
        await ResumenGrid.EditRow(resume);
    }
    void OnUpdateRow(Resuman order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //orderToUpdate = null;

        //dbContext.Update(order);

        //dbContext.SaveChanges();
    }

    async Task SaveRow(Resuman order)
    {
        //await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Resuman order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //orderToUpdate = null;

        //ordersGrid.CancelEditRow(order);

        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

}


