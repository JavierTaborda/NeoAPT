@page "/addpersonal"
@inject NotificationService NotificationService
@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService

<h3>Control de Personal</h3>
<RadzenRow class="rz-text-align-Left">
    <RadzenColumn>

        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Centro" />
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="División" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Línea" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Consultar" />
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>
</RadzenRow>


@if (Cargando == 1)
{

    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Nuevo Puesto" Click="@InsertRow" Disabled=@(personalToInsert != null || personalToUpdate != null) />

    <RadzenDataGrid @ref="@PersonalGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataPersonal" TItem="Personal" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <Columns>

            <RadzenDataGridColumn TItem="Personal" Property="PeFicha" Title="Ficha" Frozen="true" Width="80px">
                <Template>
                    @context.PeFicha
                </Template>
                <EditTemplate Context="personaledit">

                </EditTemplate>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Nombre" Frozen="true" Property="PeNombre" Width="80px">
                <Template>
                    @context.PeNombre
                </Template>
                <EditTemplate Context="personaledit">

                    @*
                <RadzenColumn>
                <RadzenRequiredValidator Text="Campo requerido." Component="PtNombre" Popup=true Style="position: absolute" />
                <RadzenTextArea @bind-Value="puestoedit.Ptnombre" Name="PtNombre" class="w-100 rz-p-sm-2" />
                </RadzenColumn>*@
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Apellido" Frozen="true" Property="PeApellido" Width="80px">
                <Template>
                    @context.PeApellido
                </Template>
                <EditTemplate Context="personaledit">

                    @*
                <RadzenColumn>
                <RadzenRequiredValidator Text="Campo requerido." Component="PtNombre" Popup=true Style="position: absolute" />
                <RadzenTextArea @bind-Value="puestoedit.Ptnombre" Name="PtNombre" class="w-100 rz-p-sm-2" />
                </RadzenColumn>*@
                </EditTemplate>
            </RadzenDataGridColumn>

            @*<RadzenDataGridColumn TItem="PuesTrab" Title="Descripción" Property="Ptdescri" Width="160px">
                <Template>
                    @context.Ptdescri
                </Template>

                <EditTemplate Context="personaledit">

                    <RadzenRequiredValidator Text="Campo requerido." Component="PtDescri" Popup=true Style="position: absolute" />
                    <RadzenTextArea @bind-Value="puestoedit.Ptdescri" Name="PtDescri" class="w-100" />

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PuesTrab" Title="Estado" Property="Ptesta" Width="80px">
                <Template>
                    @if (context.Ptesta == true)
                    {
                        <p>Activo</p>
                    }
                    else
                    {
                        <p>Inactivo</p>
                    }
                </Template>

                <EditTemplate Context="personaledit">
                    <RadzenSelectBar @bind-Value=personaledit.Ptesta Size="ButtonSize.Medium" TValue="bool?" class="w-100 rz-text-align-center">
                        <Items>
                            <RadzenSelectBarItem Text="Activo" Value="true" />
                            <RadzenSelectBarItem Text="inactivo" Value="false" />
                        </Items>
                    </RadzenSelectBar>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PuesTrab" Context="personaledit" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="40px">
                <Template Context="personaledit">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(personaledit))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>

                <EditTemplate Context="personaledit">

                    @if (agregar == false)
                    {
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(personaledit))">
                        </RadzenButton>
                    }
                    else
                    {
                        <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click=@(args => SaveRow(personaledit))>
                        </RadzenButton>
                    }
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(personaledit))">
                    </RadzenButton>

                </EditTemplate>
            </RadzenDataGridColumn>*@

        </Columns>
    </RadzenDataGrid>
}
else if (Cargando == 2)
{
    <div class="spinner"></div>
}
else
{

}
@code {
    RadzenDropDown<int> centroselect;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    List<Plantilla> plantillas;
    List<PuesTrab> puestos;
    RadzenDataGrid<Personal> PersonalGrid;
    IEnumerable<Personal> DataPersonal;

    Personal personalToInsert;
    Personal personalToUpdate;

    int valuecentro;
    int valuediv;
    int valuelinea;
    int Cargando;
    bool agregar = false;
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();

        string centro = "All1";
        centros = await APIService.GetCentrosxEmpresa(centro);
        //DataCentros = centros;

    }
    void SetDivision()
    {
        //limpiar las listas

        valuediv = 0;
        lineas = null;
        valuelinea = 0;

        divisions = new List<Division>();
        foreach (var c in centros)
        {
            foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
            {
                divisions.Add(d);

            }
        }
    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    private async Task GetData()
    {

        Cargando = 2;
        //validar que se selecciono una linea
        if (valuelinea > 0)
        {
            try
            {
                plantillas = await PersonalService.GetPlantillaPersonal(valuecentro, valuelinea);
                puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
                DataPersonal = await PersonalService.GetPersonalPlantilla(valuecentro, valuelinea);
                Cargando = 1;

            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
                Cargando = 0;

            }
        }
        else
        {
            //Mostrar mensaje para sellecionar linea
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
            Cargando = 0;
        }
    }


    void CancelEdit(Personal personaledit)
    {
        if (personaledit == personalToInsert)
        {
            personalToInsert = null;
        }

        personalToUpdate = null;
        PersonalGrid.CancelEditRow(personaledit);
        agregar = false;

    }

    void Reset()
    {
        personalToInsert = null;
        personalToUpdate = null;
    }
    async Task InsertRow()
    {
        agregar = true;
        personalToInsert = new Personal();
        await PersonalGrid.InsertRow(personalToInsert);
    }
    void OnUpdateRow(Personal puestoedit)
    {
        //for (int i = 0; i < resumen.Count; i++)
        //{
        //    if (resumen[i].IdPersonal == resume.IdPersonal)
        //    {
        //        resumen[i].IdMontos = montos.Where(m => m.IdPuesTrabNavigation.IdPuesTrab == puestonuevo).Select(a => a.IdMontos).First();
        //        resumen[i].IdMontosNavigation = montos.Where(m => m.IdMontos == resume.IdMontos).First();

        //        resumen[i].IdTipSuple = tipsuples.Where(m => m.IdTipSuple == suplencianueva).Select(a => a.IdTipSuple).First();
        //        resumen[i].IdTipSupleNavigation = tipsuples.Where(m => m.IdTipSuple == resume.IdTipSuple).First();
        //    }

        //}
        //puestonuevo = 0;
        //suplencianueva = 0;
        personalToUpdate = null;


    }
}
