@page "/addpersonal"
@inject NotificationService NotificationService
@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService
@inject TempusInterface TempusService

<h3>Control de Personal</h3>
<RadzenRow class="rz-text-align-Left">
    <RadzenColumn>

        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Centro" />
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="División" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Línea" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Consultar" />
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>
</RadzenRow>


@if (Cargando == 1)
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Nuevo Personal" Click="@InsertRow" Disabled=@(personalToInsert != null ||personalToUpdate != null || personal.Count==0) />

    <RadzenDataGrid @ref="@PersonalGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@DataPersonal" TItem="Personal" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">

        <Columns>

            <RadzenDataGridColumn TItem="Personal" Property="PeFicha" Title="Ficha" Frozen="true" Width="80px">
                <Template>
                    @context.PeFicha
                </Template>
                <EditTemplate Context="personaledit">
                    <RadzenColumn>
                        <RadzenRequiredValidator Text="Campo requerido." Component="PeFicha" Popup=true Style="position: absolute" />
                        <RadzenTextBox @bind-Value="personaledit.PeFicha" Name="PeFicha" class="w-100 rz-p-sm-2" />
                    </RadzenColumn>
                </EditTemplate>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Nombre" Frozen="true" Property="PeNombre" Width="80px">
                <Template>
                    @context.PeNombre
                </Template>
                <EditTemplate Context="personaledit">
                    <RadzenColumn>
                        <RadzenRequiredValidator Text="Campo requerido." Component="PeNombre" Popup=true Style="position: absolute" />
                        <RadzenTextBox @bind-Value="personaledit.PeNombre" Name="PeNombre" class="w-100 rz-p-sm-2" />
                    </RadzenColumn>
                </EditTemplate>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Apellido" Property="PeApellido" Width="80px">
                <Template>
                    @context.PeApellido
                </Template>
                <EditTemplate Context="personaledit">
                    <RadzenColumn>
                        <RadzenRequiredValidator Text="Campo requerido." Component="PeApellido" Popup=true Style="position: absolute" />
                        <RadzenTextBox @bind-Value="personaledit.PeApellido" Name="PeApellido" class="w-100 rz-p-sm-2" />
                    </RadzenColumn>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Grupo" Property="PeGrupo" Width="80px">
                <Template>
                    @context.PeGrupo
                </Template>
                <EditTemplate Context="personaledit">
                    <RadzenColumn>
                        @*<RadzenTextBox @bind-Value="personaledit.PeGrupo" Name="PeGrupo" class=" rz-p-sm-2"  />*@

                        <RadzenRequiredValidator Text="Campo requerido." Component="PeGrupo" Popup=true Style="position: absolute" />
                        <RadzenDropDown @bind-Value="personaledit.PeGrupo" Data="Grupos" TextProperty="Value" Name="PeGrupo" ValueProperty="Value" Style="width:70%; display: block;" />

                    </RadzenColumn>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Estado" Property="PeEstado" Width="80px">
                <Template>
                    @if (context.PeEstado == true)
                    {
                        <p>Activo</p>
                    }
                    else
                    {
                        <p>Inactivo</p>
                    }
                </Template>
                <EditTemplate Context="personaledit">

                    <RadzenSelectBar @bind-Value=personaledit.PeEstado Size="ButtonSize.Medium" Name="PeEstado" TValue="bool?" class="w-100 rz-text-align-center">
                        <Items>
                            <RadzenSelectBarItem Text="Activo" Value="true" />
                            <RadzenSelectBarItem Text="inactivo" Value="false" />
                        </Items>
                    </RadzenSelectBar>
                    <RadzenRequiredValidator Text="Campo requerido." Component="PeEstado" Popup=true Style="position: absolute" />

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Title="Puesto Provisional" Width="160px">
                <Template>
                    @if (plantillas.Where(p => p.IdPersonal == context.IdPersonal).Select(s => s.Ppuesto).Count() == 0)
                    {
                        <span>Sin puesto asignado.</span>
                    }
                    else
                    {
                        @plantillas.FirstOrDefault(p => p.IdPersonal == context.IdPersonal).Ppuesto
                    }

                </Template>

                <EditTemplate Context="personaledit">
                    @if (puestos.Count > 0)
                    {
                        <RadzenRequiredValidator Text="Campo requerido." Component="Ptnombre" Popup=true Style="position: absolute" />
                        <RadzenDropDown @bind-Value="puestonuevo" Data="puestos" TextProperty="Ptnombre" Name="Ptnombre" ValueProperty="IdPuesTrab" Style="width:100%; display: block;" />

                    }
                    else
                    {
                        <span>No hay Puestos en la línea.</span>
                    }

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Personal" Context="personaledit" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="40px">
                <Template Context="personaledit">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(personaledit))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>

                <EditTemplate Context="personaledit">

                    @if (agregar == false)
                    {
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(personaledit))">
                        </RadzenButton>
                    }
                    else
                    {
                        <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click=@(args => SaveRow(personaledit))>
                        </RadzenButton>
                    }
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(personaledit))">
                    </RadzenButton>

                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (Cargando == 2)
{
    @if(tempusloading==true)
    {
            <p></p>
            <p></p>
          <p>Cargando lista desde Tempus...</p>
            <p></p><div class="loader">
          
            <span class="hour"></span>
            <span class="min"></span>
            <span class="circel"></span>
        </div>
    }
    else
    {
            <div class="spinner"></div>
    }

}
else
{

}
@code {
    RadzenDropDown<int> centroselect;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;

    List<Plantilla> plantillas;
    List<Personal> personal;
    List<Personal> personalfinal;//lista filtrada por tempus
    List<PuesTrab> puestos;

    List<TrabajadorEnPuestoV> tempuslista;

    RadzenDataGrid<Personal> PersonalGrid;
    IEnumerable<Personal> DataPersonal;

    Personal personalToInsert;
    Personal personalToUpdate;

    int valuecentro;
    int valuediv;
    int valuelinea;
    int? puestonuevo;//puesto para la plantilla
    int Cargando;
    bool agregar = false;
    bool isLoading = false;
    bool tempusloading = false;

    Dictionary<int, string> Grupos = new Dictionary<int, string>
        {
            { 1, "A" },
            { 2, "B" },
            { 3, "C" },
            { 4, "D" },
            { 5, "N" }
        };
    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();

        string centro = "All1";
        centros = await APIService.GetCentrosxEmpresa(centro);
        //DataCentros = centros;

    }
    void SetDivision()
    {
        //limpiar las listas

        valuediv = 0;
        lineas = null;
        valuelinea = 0;

        divisions = new List<Division>();
        foreach (var c in centros)
        {
            foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
            {
                divisions.Add(d);

            }
        }
    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }



    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(Personal personaledit)
    {

        personalToUpdate = personaledit;
        puestonuevo = (plantillas.Where(p => p.IdPersonal == personaledit.IdPersonal).Select(s => s.Ppuesto).Count() > 0) ? plantillas.FirstOrDefault(p => p.IdPersonal == personaledit.IdPersonal).PidPuesto : 0;
        await PersonalGrid.EditRow(personaledit);
    }


    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(Personal personal)
    {

        personalToUpdate = null;


    }



    async Task SaveRow(Personal personaledit)
    {
        string success = "";
        if (personaledit.PeFicha is null | personaledit.PeFicha == "" | personaledit.PeNombre is null | personaledit.PeNombre == "" | personaledit.PeApellido is null | personaledit.PeApellido == "" | personaledit.PeEstado is null | puestonuevo == null | puestonuevo == 0 | personaledit.PeApellido is null | personaledit.PeApellido == "" | personaledit.PeEstado is null | personaledit.PeGrupo is null | personaledit.PeGrupo == "")
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Llene los campos vacíos.",
                    Detail = ""

                });

        }
        else
        {
            try
            {
                Plantilla editplantilla = new Plantilla();
                int idplantilla = 0;

                //Buscar plantilla
                if (plantillas.Where(p => p.IdPersonal == personaledit.IdPersonal).Count() > 0)
                {
                    idplantilla = plantillas.FirstOrDefault(l => l.IdPersonal == personaledit.IdPersonal).IdPlantilla;
                }
                //crear plantilla a insertar o editar
                editplantilla.IdPlantilla = idplantilla;
                editplantilla.IdPersonal = personaledit.IdPersonal;
                editplantilla.PidLinea = valuelinea;
                editplantilla.Plinea = lineas.FirstOrDefault(l => l.IdLinea == valuelinea).Lnom;
                editplantilla.Pcentro = centros.FirstOrDefault(l => l.IdCentro == valuecentro).Cnom;
                editplantilla.PidCentro = valuecentro;
                editplantilla.PidPuesto = puestonuevo;
                editplantilla.Ppuesto = puestos.FirstOrDefault(p => p.IdPuesTrab == puestonuevo).Ptnombre;
                editplantilla.IdPersonalNavigation = personaledit;
                personaledit.PeFicha = personaledit.PeFicha.Replace(" ", "");

                if (idplantilla > 0)
                {
                    success = await PersonalService.UpdatePlantilla(editplantilla);
                }
                else if (idplantilla == 0 & personaledit.IdPersonal > 0 | idplantilla == 0)
                {
                    success = await PersonalService.InsertarPlantilla(editplantilla);
                }

                if (success == "success")
                {
                    personalToInsert = null;
                    puestonuevo = 0;
                    await PersonalGrid.UpdateRow(personaledit);
                    await ActualizarData();
                }


            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "No se completó el cambio",
                        Detail = ex.Message

                    });
            }
        }


    }


    void CancelEdit(Personal personaledit)
    {
        if (personaledit == personalToInsert)
        {
            personalToInsert = null;
        }

        personalToUpdate = null;
        PersonalGrid.CancelEditRow(personaledit);
        agregar = false;

    }


    void Reset()
    {
        personalToInsert = null;
        personalToUpdate = null;
    }

    async Task InsertRow()
    {
        agregar = true;
        personalToInsert = new Personal();
        await PersonalGrid.InsertRow(personalToInsert);
    }


    private async Task GetData()
    {
        Reset();
        Cargando = 2;
        //tempusloading = true; 
        if (valuelinea > 0)
        {

            try
            {
                //tempuslista = await TempusService.GetListaConversion();
                //tempusloading = false;

                if(tempusloading==false)
                {
                    Cargando = 2;
                    plantillas = await PersonalService.GetPlantillaPersonal(valuecentro, valuelinea);
                    puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
                    personal = await PersonalService.GetPersonalPlantilla(valuecentro, valuelinea);
                    DataPersonal = personal;


                    ////Cargar lista de personal que marco puesto en tempus
                    //string fichatempus = "";
                    //personalfinal = new List<Personal>();

                    //foreach(var f in tempuslista)
                    //{                            
                    //    fichatempus = f.CodigoTrabajador.Substring(4).ToString();
                    //    if(personal.Where(f=>f.PeFicha==fichatempus).Count()>0)
                    //    {
                    //        personalfinal.Add(personal.First(f => f.PeFicha == fichatempus));
                    //        personal.Remove(personal.First(f => f.PeFicha == fichatempus));
                    //    }
                        
                    //}
                    
                    Cargando = 1;
                }
                else
                {   tempusloading = false;
                    Cargando = 0;
                    
                }


            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail =ex.Data+ ex.Message });
                Cargando = 0;

            }
        }
        else
        {
            //Mostrar mensaje para sellecionar linea
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
            Cargando = 0;
            tempusloading = false;
        }

    }

    private async Task ActualizarData()
    {
        //Actualizar listas y actualizar DataG
        isLoading = true;
        plantillas = await PersonalService.GetPlantillaPersonal(valuecentro, valuelinea);
        puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
        personal = await PersonalService.GetPersonalPlantilla(valuecentro, valuelinea);
        DataPersonal = personal;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Style = "position: relative;",
                Duration = 40000,
                Summary = "Registro Exitoso",
                Detail = "Registro Exitoso"
            });

        isLoading = false;
        agregar = false;
    }



}
