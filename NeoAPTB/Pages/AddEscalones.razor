@page "/setmontos"


@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService

@inject PersonalInterface PersonalService
@inject MontosInterface MontosService
@inject PuestosTrabajoInterface PuestosTrabajoslService
@inject ResumenInterface ResumenService
@inject APIInterface APIService
@attribute [Authorize(Roles = "Admin, SuperAdmin")]

<h3>Administar Escalones</h3>

<p></p>

 @if (puesto == 0)
    {
<RadzenRow class="rz-text-align-Left">
    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Centro" />
            <RadzenDropDown @ref=@centroselect FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=centros TextProperty="Cnom" ValueProperty="IdCentro" AllowClear="true" @bind-Value=valuecentro Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetDivision">
            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="División" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@divisions ValueProperty="IdDivision" TextProperty="Dnombre" AllowClear="true" @bind-Value=valuediv Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Change="@SetLinea">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Línea" />
            <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            TValue="int" Data=@lineas ValueProperty="IdLinea" TextProperty="Lnom" AllowClear="true" @bind-Value=valuelinea Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))">

            </RadzenDropDown>
        </div>
    </RadzenColumn>

    <RadzenColumn>
        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenLabel Text="Consultar" />
            <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    </RadzenColumn>
    </RadzenRow>
}
else
{
    <RadzenButton Click=@(args => ResetPuesto()) Text="Nueva Consulta" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="autorenew" ButtonStyle="ButtonStyle.Success" />

}
@if (Cargando == 1)
{
    <p></p>
    <RadzenRow>




        <div class="rz-p-sm-2 rz-text-align-left">
            <RadzenColumn>
                <RadzenLabel Text="Puesto " />
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                TValue="int" Data=@puestos ValueProperty="IdPuesTrab" TextProperty="Ptnombre" AllowClear="true" @bind-Value=puesto Style="width: 100%; max-width: 350px;min-width: 90px;" SearchTextChanged="@(args => searchTextChanged(args))" Disabled=@(montosToInsert != null || montosToUpdate != null) Change="@SetPuesto">

                </RadzenDropDown>
            </RadzenColumn>

        </div>
    </RadzenRow>
    @if (puesto > 0)
    {
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Nuevo Escalon" Click="@InsertRow" Disabled=@(montosToInsert != null || montosToUpdate != null || puesto ==0) />

        <RadzenDataGrid @ref="@MontosGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@DataMontos" TItem="Monto" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>

                <RadzenDataGridColumn TItem="Monto" Title="Línea" Frozen="true" Width="80px">
                    <Template>
                        @if (montos.Count() > 0)
                        {
                            @montos.FirstOrDefault(m=>m.IdLineaNavigation.IdLinea==valuelinea).IdLineaNavigation.Lnom

                        }
                    </Template>
                    <EditTemplate Context="montoedit">
                        @lineas.FirstOrDefault(l=>l.IdLinea==valuelinea).Lnom
                    </EditTemplate>

                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Monto" Title="Puesto" Frozen="true" Property="IdPuesTrabNavigation.Ptnombre" Width="80px">
                    <Template>
                        @context.IdPuesTrabNavigation.Ptnombre
                    </Template>
                    <EditTemplate Context="montoedit">
                        @puestos.Find(p=>p.IdPuesTrab==puesto).Ptnombre
                        @* <RadzenColumn>
                <RadzenRequiredValidator Text="Campo requerido." Component="PtNombre" Popup=true Style="position: absolute" />
                <RadzenTextArea @bind-Value="montoedit.Ptnombre" Name="PtNombre" class="w-100 rz-p-sm-2" />
                </RadzenColumn>*@
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Monto" Title="Escalon" Property="Mescalon" Width="80px">
                    <Template>
                        @context.Mescalon
                    </Template>

                    <EditTemplate Context="montoedit">

                        <RadzenRequiredValidator Text="Campo requerido." Component="Mescalon" Popup=true Style="position: absolute" />
                        <RadzenNumeric @bind-Value="montoedit.Mescalon" Name="Mescalon" class="w-90" />

                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Monto" Title="Monto" Property="Mmonto" Width="80px">
                    <Template>
                        @context.Mmonto
                    </Template>

                    <EditTemplate Context="montoedit">

                        <RadzenRequiredValidator Text="Campo requerido." Component="Mmonto" Popup=true Style="position: absolute" />
                        <RadzenNumeric @bind-Value="montoedit.Mmonto" Name="Mmonto" class="w-90" />

                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Monto" Title="Estado" Property="Mesta" Width="80px">
                    <Template>
                        @if (context.Mesta == true)
                        {
                            <p>Activo</p>
                        }
                        else
                        {
                            <p>Inactivo</p>
                        }
                    </Template>

                    <EditTemplate Context="montoedit">
                        <RadzenSelectBar @bind-Value=montoedit.Mesta Size="ButtonSize.Medium" TValue="bool?" class="w-100 rz-text-align-center">
                            <Items>
                                <RadzenSelectBarItem Text="Activo" Value="true" />
                                <RadzenSelectBarItem Text="inactivo" Value="false" />
                            </Items>
                        </RadzenSelectBar>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Monto" Context="montoedit" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="40px">
                    <Template Context="montoedit">
                        @if (montoedit.Mescalon > 0)
                        {
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(montoedit))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                    </Template>

                    <EditTemplate Context="montoedit">

                        @if (agregar == false)
                        {
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(montoedit))">
                            </RadzenButton>
                        }
                        else
                        {
                            <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click=@(args => SaveRow(montoedit))>
                            </RadzenButton>
                        }
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(montoedit))">
                        </RadzenButton>

                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>

        <div class="container">
            <div class="row">
                <div class="col-sm-12 my-5">
                    <h5>Escalones de @puestos.Find(p=>p.IdPuesTrab==puesto).Ptnombre en  @montos.FirstOrDefault(m=>m.IdLineaNavigation.IdLinea==valuelinea).IdLineaNavigation.Lnom</h5>
                    <RadzenChart ColorScheme="ColorScheme.Divergent">
                        <RadzenLineSeries Smooth="false" Data="@montos.Where(p => p.IdPuesTrab == puesto)" CategoryProperty="Mescalon" Title="@puestos.Find(p=>p.IdPuesTrab==puesto).Ptnombre" LineType="LineType.Solid" ValueProperty="Mmonto">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenLineSeries>


                        <RadzenCategoryAxis Padding="20" Step="1">
                            <RadzenAxisTitle Text="Escalón" />
                        </RadzenCategoryAxis>
                          
                        <RadzenValueAxis >
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Monto Bs" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div>
    }
}
else if (Cargando == 2 | Cargando == 1 & montos is null )
{
    <div class="spinner"></div>
}
else
{

}

@code {
    [CascadingParameter]
    private List<Claim> claims { get; set; }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);
    }


    RadzenDataGrid<Monto> MontosGrid;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Resuman> resumen { get; set; }



    IEnumerable<Monto> DataMontos;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;



    int valuecentro;
    int valuediv;
    int valuelinea;
    int puesto { get; set; }//guarda el id del  puesto de trabajo.
    DateTime fecha = DateTime.Now;//fecha seleccionada


    bool isLoading = false;
    bool agregar = false;//cambiar el icono del boton de guardar
    int Cargando = 0; //valida si se agrega resumen

    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar

    Monto montosToInsert;
    Monto montosToUpdate;


    protected override async Task OnInitializedAsync()
    {
        //await base.OnInitializedAsync();

       

        await CreateData();

        if (claims[1].Value == "Admin" | claims[1].Value == "SuperAdmin")
        {
            UsrAdmin = claims[1].Value;
            centros = await APIService.GetCentrosxEmpresa("All" + claims[10].Value);

        }
        else if (claims[1].Value == "SupIntendenteGeneral")
        {
            UsrAdmin = claims[1].Value;
            centros = await APIService.GetCentrosxEmpresa(claims[11].Value);


        }
        else
        {
            centros = await APIService.GetCentrosxEmpresa(claims[11].Value);

        }
        valuecentro = centros.First().IdCentro;
        SetDivision();
        SetLinea();


    }
    void SetDivision()
    {
        //limpiar las listas

        valuediv = 0;
        lineas = null;
        valuelinea = 0;

        divisions = new List<Division>();
        foreach (var c in centros)
        {
            foreach (var d in c.Divisions.Where(li => li.IdCentro == valuecentro))
            {
                divisions.Add(d);

            }
        }
        valuediv = divisions.First().IdDivision;

    }

    void SetLinea()
    {

        lineas = new List<Linea>();
        foreach (var d in divisions)
        {
            foreach (var l in d.Lineas.Where(li => li.IdDivision == valuediv))
            {
                lineas.Add(l);
            }
        }
        valuelinea = lineas.First().IdLinea;

    }

    void SetPuesto()
    {

        DataMontos = montos.Where(p => p.IdPuesTrab == puesto).ToList();

    }   

    void ResetPuesto()
    {

        puesto = 0;

    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(Monto montoedit)
    {
        montosToUpdate = montoedit;
        await MontosGrid.EditRow(montoedit);
    }

    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(Monto montoedit)
    {

        montosToUpdate = null;


    }

    async Task SaveRow(Monto montoedit)
    {
        string check = "";
        if (montoedit.IdPuesTrab > 0)
        {
            try
            {
                check = await MontosService.UpdateMontoPuesto(montoedit);
                if (check == "success")
                {
                    await MontosGrid.UpdateRow(montoedit);
                    await ActualizarData();
                }

                else if (check == "existe")
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Style = "position: relative;",
                            Duration = 40000,
                            Summary = "Este Escalón/Monto se encuentra activo, si requiere modificar inactive el anterior",
                        });
                }

            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "No se completó el registro",
                        Detail = ex.Message

                    });
            }

        }
        else if (montoedit.Mescalon is not null & montoedit.Mmonto is not null)
        {
            try
            {
                //Monto montonuevo = new Monto();
                montoedit.IdLinea = valuelinea;
                montoedit.IdPuesTrab = puesto;
                //montonuevo.Mescalon = 0;
                //montonuevo.Mmonto = 0;
                montoedit.MfecAct = DateTime.Now;
                montoedit.Muser = "Javier Taborda";
                montoedit.Mesta = true;

                check = await MontosService.InsertarMontosPuesto(montoedit);
                if (check == "success")
                {
                    await MontosGrid.UpdateRow(montoedit);
                    montosToInsert = null;
                    await ActualizarData();
                }
                else if (check == "existe")
                {

                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Style = "position: relative;",
                            Duration = 40000,
                            Summary = "Este Escalón/Monto se encuentra activo, si requiere modificar inactive el anterior",
                        });
                }
            }
            catch
            {
                montosToInsert = null;
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "No se completó el registro",
                        Detail = "No se pudo insertar el monto estándar, si el problema persiste contacte al desarrollador."

                    });
            }

        }


    }




    void CancelEdit(Monto montoedit)
    {
        if (montoedit == montosToInsert)
        {
            montosToInsert = null;
        }

        MontosGrid.CancelEditRow(montoedit);
        agregar = false;

    }

    void Reset()
    {
        montosToInsert = null;
        montosToUpdate = null;
    }
    async Task InsertRow()
    {
        agregar = true;
        montosToInsert = new Monto();
        await MontosGrid.InsertRow(montosToInsert);
    }

    private async Task GetData()
    {
        Cargando = 2;
        //validar que se selecciono una linea
        if (valuelinea > 0)
        {
            try
            {
                Reset();
                montos = await MontosService.GetMontosxLinea(valuelinea);
                puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
                //DataMontos= montos;
                Cargando = 1;

            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
                Cargando = 0;

            }
        }
        else
        {
            //Mostrar mensaje para sellecionar linea
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
            Cargando = 0;
        }

    }
    private async Task ActualizarData()
    {
        //Actualizar listas y actualizar DataG
        isLoading = true;
        montos = await MontosService.GetMontosxLinea(valuelinea);
        puestos = await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
        DataMontos = montos.Where(p => p.IdPuesTrab == puesto).ToList();


        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Style = "position: relative;",
                Duration = 40000,
                Summary = "Registro Exitoso",
                Detail = "Registro Exitoso"
            });

        isLoading = false;
        agregar = false;
    }

}
