@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@* @inject IMaestraData MaestraService
@inject IRolLogic RolLogicService
@inject IPersonal PersonalService *@
@inject IResumen ResumenService


<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">

    @if (!mostrarCuadroDeTexto)
    {
        <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterOperator="StringFilterOperator.Contains"
                        AllowFiltering="true"
                        TValue="int"
                        TextProperty="PeFicha" Data=@personalfinal ValueProperty="IdPersonal" AllowClear="false" @bind-Value=idPersonal
                        Style="width: 100%; max-width: 350px;min-width: 90px;">

            <Template Context="item">
                @item.PeFicha - @item.PeNombre @item.PeApellido

            </Template>
        </RadzenDropDown>
        <div class="col-md-2">
            <RadzenButton Icon="search" Style="width:100%" Text="Asignar Otra Ficha" Click="@MostrarCuadroTexto" />
        </div>
    }
    else
    {
        <RadzenTextBox @bind-Value="FichaConsultada" Placeholder="Ficha..." Style="width: 100%; max-width: 350px;min-width: 90px; " />
        <div class="col-md-2">
            <RadzenButton Icon="search" Style="width:100%" Text="Buscar Ficha" Click=@(args => BuscarFicha()) />
        </div>
        <div class="col-md-2">
            <RadzenButton Icon="cached" Style="width:100%" Text="Cambiar a Lista" ButtonStyle="ButtonStyle.Info" Click="@MostrarCuadroTexto" />
        </div>
       
    }

</RadzenStack>
@if (resultadoBusqueda.IdPersonal > 0 && mostrarCuadroDeTexto)
{
@* 
    <p>
        @resultadoBusqueda.PeFicha
        @resultadoBusqueda.PeNombre
        @resultadoBusqueda.PeApellido
    </p> *@

    <RadzenCard Style="max-width: 500px;" class="m-3 pt-4">
        <h3 class="h5">Información del Trabajador</h3>
        <div class="d-flex flex-row align-items-center">
            <RadzenIcon Icon="person" Size="IconSize.XLarge" IconColor="@Colors.SuccessDark" Class="mr-3" Style="font-weight: 500;font-size: 52px;" />
            <div>
                <div>Nombre del Trabajador</div>
                <b>@resultadoBusqueda.PeNombre @resultadoBusqueda.PeApellido</b>  
                <div class="mt-3">Ficha</div>
                <b>@resultadoBusqueda.PeFicha </b> 
            </div>
        </div>
    </RadzenCard>
 
}
<RadzenStack Orientation="Orientation.Horizontal" class="pt-5">

    <RadzenButton Click=@(args => Insertar()) Text="Registrar" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Icon="close_fullscreen" Text="Cerrar" Click="@(_ => Service.CloseSide(null))" />

</RadzenStack>

@code {

    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }

    [Inject] DialogService Service { get; set; }


    [Parameter]
    public List<Personal>? personalfinal { get; set; }
    [Parameter]
    public int idPersonal { get; set; }

    Personal resultadoBusqueda = new Personal();
    private bool mostrarCuadroDeTexto = false;
    private string FichaConsultada;


    void MostrarCuadroTexto()
    {
        if (!mostrarCuadroDeTexto)
        {
            resultadoBusqueda = new Personal();
            FichaConsultada = "";
            mostrarCuadroDeTexto = true;
        }
        else
        {
            mostrarCuadroDeTexto = false;            
        }
    }


    private async Task Insertar()
    {
        if (idPersonal > 0)
        {          
            Service.CloseSide((idPersonal, mostrarCuadroDeTexto, resultadoBusqueda));
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Seleccione una Ficha Válida.",
                    Detail = ""
                });
        }
    }
    private async Task BuscarFicha()
    {

        try
        {if (!string.IsNullOrEmpty(FichaConsultada))
            {
                resultadoBusqueda = await ResumenService.GetPersonalSinTempus(FichaConsultada);
                if (resultadoBusqueda.IdPersonal > 0)
                {
                    idPersonal = resultadoBusqueda.IdPersonal;
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Style = "position: relative;",
                            Duration = 40000,
                            Summary = "No se encuentra registrada la ficha consultada.",
                            Detail = "Por favor, verifique el número de ficha e intente de nuevo."
                        });
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "Coloque una ficha válida.",                      
                    });
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Ocurrió un error, intente de nuevo.",
                    Detail = ""
                });
        }

    }
}
