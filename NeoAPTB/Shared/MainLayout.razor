@inherits LayoutComponentBase
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
<PageTitle>NeoAPTB</PageTitle>

<AuthorizeView>

    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">

                    <LogoutButton />

                    Aplicación en desarrollo
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

        <RadzenContextMenu />
        <RadzenNotification />
        <RadzenDialog />
    </Authorized>

    <NotAuthorized>


     @*   <div class="text-center fondo">

            <div class="form-signin w-25 m-auto loginform ">

                <img class="mb-4" id="logoLogin" src="./images/Neo.png">

                <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>

                <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Usuario</RadzenText>

                <RadzenTextBox Placeholder="Usuario" @bind-Value="user.UserName" class="w-100" />
                <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Contraseña</RadzenText>
                <RadzenPassword @bind-Value="user.Password" Placeholder="Contraseña..." class="w-100" />
                <RadzenButton Click=Login Text="Iniciar Sesión" Variant="Variant.Flat" Style="width: 60%;" Icon="login" ButtonStyle="ButtonStyle.Success" />

            </div>

        </div>*@

              
            <main>
                <div class="text-center fondo">
                    <RadzenTemplateForm Context="radzen"  TItem="UserLoginDto" Data="@user" class="form-signin w-25 m-auto loginform ">

                    <img class="mb-4" id="logoLogin" src="./images/Neo.png">
                        <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>
 
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Usuario</RadzenText>
                    <RadzenTextBox Placeholder="Usuario" Name="UserName" id="usuario" @bind-Value="user.UserName" class="w-100" />
                       
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Contraseña</RadzenText>
                    <RadzenPassword @bind-Value=user.Password Name="Password" id="contraseña" Placeholder="Contraseña..." class="w-100" />
 
                        <RadzenButton class="mt-4" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Disabled="@false" Text="Registrar" ButtonStyle="ButtonStyle.Success" Click=Login/>
                    </RadzenTemplateForm>
                </div>
           
            </main>
       


    </NotAuthorized>
</AuthorizeView>
<RadzenContextMenu />
<RadzenNotification />
<RadzenDialog />

@code {


    [CascadingParameter]
    private List<Claim> claims { get; set; }

    private string _message = "", mensaje = "";
    UserLoginDto user = new UserLoginDto();
    private bool carga = false;
    private bool _buttonDisabled = true;
    //private BSAlert? _alertRef;



    protected async Task Login()
    {
        mensaje = "";
        user.Proyecto = "NeoBonoProduccion";
        if (user.UserName is not null)
        {
            carga = true;
            var result = await Http.PostAsJsonAsync("http://neo.paveca.com.ve/Authentication/api/Auth/Login", user);
            //var result = await Http.PostAsJsonAsync("http://localhost:5090/api/Auth/Login", user);
            var ValidarToken = await result.Content.ReadAsStringAsync();

            if (ValidarToken != null)
            {

                if (ValidarToken == "NotFoundUser")
                {
                    mensaje = "Verifique el usuario.";
                    await Notificacion("advertencia", mensaje, "");
                    carga = false;
                }
                else if (ValidarToken == "WrongPassword")
                {
                    mensaje = "Contraseña Incorrecta.";
                    await Notificacion("error", mensaje, "");
                    carga = false;
                }
                else if (ValidarToken == "null")
                {
                    mensaje = "Este usuario no está registrado en este proyecto.";
                    await Notificacion("advertencia", mensaje, "");
                    carga = false;
                }
                else
                {
                    mensaje = "Accediendo...";
                    Console.WriteLine(ValidarToken);
                    await LocalStorage.SetItemAsync("NeoBonoProduccionToken", ValidarToken);
                    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                    var userA = authState.User;
                    claims = Enumerable.ToList(userA.Claims);
                    user = new UserLoginDto();
                    carga = false;
                    mensaje = "";
                    NavigationManager.NavigateTo("");
                }
            }

        }



    }



    public async Task Notificacion(string tipo, string mensaje, string detalle)

    {

        NotificationMessage notificacion = new NotificationMessage { };

        if (tipo == "error")
        {

            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };

        }
        else if (tipo == "info")
        {

            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };

        }
        else if (tipo == "exito")
        {

            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };

        }
        else if (tipo == "advertencia")
        {

            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };

        }

        NotificationService.Notify(notificacion);

    }

}