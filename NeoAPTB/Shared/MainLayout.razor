@inherits LayoutComponentBase
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
<PageTitle>NeoAPTB</PageTitle>

<AuthorizeView>

    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">
                    
                    <LogoutButton />
                    
                    Aplicación en desarrollo
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

        <RadzenContextMenu />
        <RadzenNotification />
        <RadzenDialog />
    </Authorized>
    <NotAuthorized>


        <div class="text-center fondo">

            <div class="form-signin w-25 m-auto loginform ">
                <div>
                    @if (@mensaje == "Accediendo...")
                    {

                    }
                    else if (@mensaje == "Este usuario no está registrado en este proyecto." | mensaje == "Verifique el usuario.")
                    {

                    }
                    else if (@mensaje == "Contraseña Incorrecta.")
                    {

                    }
                </div>
                <p></p>
                @mensaje
                <img class="mb-4" src="./images/Neo.png" alt="" width="100" height="100">
                <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>
                <div class="rz-p-12 rz-text-align-center">
                    <RadzenRequiredValidator Text="Campo requerido." Component="User" Popup=true Style="position: absolute" />
                    <RadzenTextBox @bind-Value="user.UserName" Name="User" />
                </div>
                <div class="rz-p-12 rz-text-align-center">
                    <RadzenRequiredValidator Text="Campo requerido." Component="Pass" Popup=true Style="position: absolute" />
                    <RadzenPassword @bind-Value="user.Password" Name="Pass" />
                </div>
                <div class="rz-p-sm-2 rz-text-align-left">
                    <RadzenButton Click=Login Text="Iniciar Sesión" Variant="Variant.Flat" Style="width: 100%;" Icon="login" ButtonStyle="ButtonStyle.Success" />
                </div>



            </div>
        </div>


    </NotAuthorized>
</AuthorizeView>

@code {


    [CascadingParameter]
    private List<Claim> claims { get; set; }

    private string _message = "", mensaje = "";
    UserLoginDto user = new UserLoginDto();
    private bool carga = false;
    private bool _buttonDisabled = true;
    //private BSAlert? _alertRef;


    protected async Task Login()
    {
        mensaje = "";
        user.Proyecto = "NeoBonoProduccion";
        if (user.UserName is not null )
        {
            carga = true;
            var result = await Http.PostAsJsonAsync("http://neo.paveca.com.ve/Authentication/api/Auth/Login", user);
            //var result = await Http.PostAsJsonAsync("http://localhost:5090/api/Auth/Login", user);
            var ValidarToken = await result.Content.ReadAsStringAsync();

            if (ValidarToken != null)
            {

                if (ValidarToken == "NotFoundUser")
                {
                    mensaje = "Verifique el usuario.";
                    carga = false;
                }
                else if (ValidarToken == "WrongPassword")
                {
                    mensaje = "Contraseña Incorrecta.";
                    carga = false;
                }
                else if (ValidarToken == "null")
                {
                    mensaje = "Este usuario no está registrado en este proyecto.";
                    carga = false;
                }
                else
                {
                    mensaje = "Accediendo...";
                    Console.WriteLine(ValidarToken);
                    await LocalStorage.SetItemAsync("NeoBonoProduccionToken", ValidarToken);
                    var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                    var userA = authState.User;
                    claims = Enumerable.ToList(userA.Claims);
                    user = new UserLoginDto();
                    carga = false;
                    mensaje = "";
                    NavigationManager.NavigateTo("");
                }
            }

        }



    }

}